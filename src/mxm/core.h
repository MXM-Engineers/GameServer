#pragma once
#include <common/base.h>
#include <common/protocol.h>
#include <common/vector_math.h>

enum class ActorUID: u32
{
	INVALID = 0,
};

// used in skill.xml, botskillconditiondata.xml
// xml tag _NormalConds attribute _ConditionType
// values are from decompile
enum class BotSkillCondition : i32
{
	UNKNOWN_BOT_SKILL_CONDITION_TYPE = -1,
	BOT_SKILL_CONDITION_NO_CONDITION = 0,
	BOT_SKILL_CONDITION_DISTANCE,
	BOT_SKILL_CONDITION_HPRATIO,
	BOT_SKILL_CONDITION_SPRATIO,
	BOT_SKILL_CONDITION_UGRATIO,
	BOT_SKILL_CONDITION_OVERHEADRATIO,
	BOT_SKILL_CONDITION_FRIENDLY_PC_IN_RANGE,
	BOT_SKILL_CONDITION_ENEMY_PC_IN_RANGE,
	BOT_SKILL_CONDITION_FRIENDLY_CREATURE_IN_RANGE,
	BOT_SKILL_CONDITION_ENEMY_CREATURE_IN_RANGE,
	BOT_SKILL_CONDITION_MAX
};

// used in skill.xml, botskillconditiondata.xml
// xml tag _StatusTypeConds attribute _StatusCategory
// values are from decompile
enum class BotSkillStatustypeCategory : i32
{
	UNKNOWN_BOT_SKILL_STATUSTYPE_CATEGORY_TYPE = -1,
	BOT_SKILL_STATUSTYPE_CATEGORY_UNKNOWN = 0,
	BOT_SKILL_STATUSTYPE_CATEGORY_EACH_TYPE,
	BOT_SKILL_STATUSTYPE_CATEGORY_EACH_INDEX,
	BOT_SKILL_STATUSTYPE_CATEGORY_CC_BLOCKALL,
	BOT_SKILL_STATUSTYPE_CATEGORY_CC_RESTRAIN,
	BOT_SKILL_STATUSTYPE_CATEGORY_CC_DISTURB,
	BOT_SKILL_STATUSTYPE_CATEGORY_DEBUFF,
	BOT_SKILL_STATUSTYPE_CATEGORY_INVINCIBLE,
	BOT_SKILL_STATUSTYPE_CATEGORY_MAX
};

// used in CREATURE_CHARACTER.xml, WEAPON.xml
// used to link character and weapon together
// Todo: rename to ClassType again but atm conflict in protocol.h
// values from decompile
enum class ClassTypeCharacter : i32
{
	CLASS_TYPE_UNKNOWN = -1,
	CLASS_TYPE_STRIKER = 1,
	CLASS_TYPE_ARTILLERY,
	CLASS_TYPE_ASSASSIN,
	CLASS_TYPE_ELECTRO,
	CLASS_TYPE_DEFENDER,
	CLASS_TYPE_SNIPER,
	CLASS_TYPE_DEATHKNIGHT,
	CLASS_TYPE_DESTROYER,
	CLASS_TYPE_MECHANIC,
	CLASS_TYPE_SOULMASTER,
	CLASS_TYPE_DOUBLEGUN,
	CLASS_TYPE_JINSEOYEON,
	CLASS_TYPE_KROMEDE,
	CLASS_TYPE_RODMASTER,
	CLASS_TYPE_PHOTOG,
	CLASS_TYPE_ICEQUEEN,
	CLASS_TYPE_MAGICGIRL,
	CLASS_TYPE_POHWARAN,
	CLASS_TYPE_BOOMERANG,
	CLASS_TYPE_SLIME,
	CLASS_TYPE_MONDOZAX,
	CLASS_TYPE_LILU,
	CLASS_TYPE_EFREET,
	CLASS_TYPE_SHADOWHUNTER,
	CLASS_TYPE_RYTLOCK,
	CLASS_TYPE_CATTHECAT,
	CLASS_TYPE_RNB,
	CLASS_TYPE_BATTER,
	CLASS_TYPE_ANDROA,
	CLASS_TYPE_ANDROB,
	CLASS_TYPE_ATTACKER,
	CLASS_TYPE_BOXER,
	CLASS_TYPE_SHUGOTRADER,
	CLASS_TYPE_NAGA,
	CLASS_TYPE_LAUNCHER,
	CLASS_TYPE_STATESMAN,
	CLASS_TYPE_YURI,
	CLASS_TYPE_ESPER,
	CLASS_TYPE_PRIEST,
	CLASS_TYPE_GHOSTWIDOW,
	CLASS_TYPE_SHUTTLE,
	CLASS_TYPE_JAVELIN,
	CLASS_TYPE_GATLING,
	CLASS_TYPE_GUARDIAN,
	CLASS_TYPE_RESERVED_START,
	CLASS_TYPE_ALEX,
	CLASS_TYPE_TOPAZ,

	CLASS_TYPE_TITAN = 900,
	CLASS_TYPE_TITAN_SIEGE,
	CLASS_TYPE_MAX
};

enum class EChatType : i32
{
	E_CHAT_TYPE_INVALID = 0,
	E_CHAT_TYPE_NOTICE,
	E_CHAT_TYPE_NOTICE_CHAT,
	E_CHAT_TYPE_NOTICE_BANNER,
	E_CHAT_TYPE_SYSTEM_GM,
	E_CHAT_TYPE_SYSTEM1,
	E_CHAT_TYPE_SYSTEM2,
	E_CHAT_TYPE_SYSTEM3,
	E_CHAT_TYPE_MOTD,
	E_CHAT_TYPE_NPC,
	E_CHAT_TYPE_NORMAL,
	E_CHAT_TYPE_RECV_WHISPER,
	E_CHAT_TYPE_SEND_WHISPER,
	E_CHAT_TYPE_ALL_PLAYER,
	E_CHAT_TYPE_TEAM,
	E_CHAT_TYPE_GUILD,
	E_CHAT_TYPE_PARTY,
	E_CHAT_TYPE_CHANNEL = 20
};

// used in CREATURE_MONSTER_BOT.xml, CREATURE_MONSTER_PVE.xml
// xml tag CreatureComData attribute _Rank
// values are from decompile
enum class CreatureRank : i32
{
	UNKNOWN_CREATURE_RANK = -1, // UNKNOWN_CREATURE_RANK default for switch case
	CREATURE_RANK_INVALID = 0,
	CREATURE_RANK_COMMON,
	CREATURE_RANK_ELITE,
	CREATURE_RANK_ELITENAMED,
	CREATURE_RANK_HERO,
	CREATURE_RANK_BOSS,
	CREATURE_RANK_EX,
	CREATURE_RANK_NODROP,
	CREATURE_RANK_NO_MONSTER,
	CREATURE_RANK_NO_MAX
};

// used in CREATURE_MONSTER_BOT.xml, CREATURE_MONSTER_PVE.xml
// xml tag CreatureComData attribute _RankDetail
// values are from decompile
enum class CreatureRankDetail : i32
{
	UNKNOWN_CREATURE_RANK_DETAIL = -1, // UNKNOWN_CREATURE_RANK_DETAIL default for switch case
	CREATURE_RANK_DETAIL_INVALID = 0,
	CREATURE_RANK_DETAIL_COMMON_1,
	CREATURE_RANK_DETAIL_COMMON_2,
	CREATURE_RANK_DETAIL_COMMON_3,
	CREATURE_RANK_DETAIL_COMMON_4,
	CREATURE_RANK_DETAIL_COMMON_5,
	CREATURE_RANK_DETAIL_ELITE_1,
	CREATURE_RANK_DETAIL_ELITE_2,
	CREATURE_RANK_DETAIL_ELITE_3,
	CREATURE_RANK_DETAIL_ELITE_4,
	CREATURE_RANK_DETAIL_ELITE_5,
	CREATURE_RANK_DETAIL_ELITE_6,
	CREATURE_RANK_DETAIL_ELITE_7,
	CREATURE_RANK_DETAIL_ELITE_8,
	CREATURE_RANK_DETAIL_ELITE_9,
	CREATURE_RANK_DETAIL_ELITE_10,
	CREATURE_RANK_DETAIL_ELITENAMED_1,
	CREATURE_RANK_DETAIL_ELITENAMED_2,
	CREATURE_RANK_DETAIL_ELITENAMED_3,
	CREATURE_RANK_DETAIL_ELITENAMED_4,
	CREATURE_RANK_DETAIL_ELITENAMED_5,
	CREATURE_RANK_DETAIL_HERO,
	CREATURE_RANK_DETAIL_BOSS,
	CREATURE_RANK_DETAIL_EX,
	CREATURE_RANK_DETAIL_NO_MONSTER,
	CREATURE_RANK_DETAIL_MAX
};

// Possible CreatureComData _Type from the xml files
// These types can be used when the _Type in EntityComData is CREATURE
// values are from decompile
// ToDo test how the game react if the EntityComData Type isn't CREATURE
enum class CreatureType: i32
{
	CREATURE_TYPE_INVALID = -1, //UNKNOWN_CREATURE_TYPE default for switch case
	CREATURE_TYPE_NONE = 0,
	CREATURE_TYPE_PC,
	CREATURE_TYPE_MONSTER,
	CREATURE_TYPE_NPC,
	CREATURE_TYPE_ALLY,
	CREATURE_TYPE_BOT,
	CREATURE_TYPE_NONE_DYNAMIC,
	CREATURE_TYPE_MAX
};

// _Type in EntityComData
// got values from decompile
enum class EntityType : i32
{
	ENTITY_INVALID = -1, //UNKNOWN_ENTITY_TYPE default return
	ENTITY_TERRAIN = 0, // haven't found this one in EntityComData was in an attribute CaseValue1 in tag <StatePlay>
	ENTITY_CREATURE,
	ENTITY_ITEM,
	ENTITY_DYNAMIC,
	ENTITY_REMOTE,
	ENTITY_MARKER,
	ENTITY_EFFECT,
	ENTITY_SOUND, //not found in chinese data files check if this is changed to SFX in chinese release
	ENTITY_DEFAULT,
	ENTITY_MAX,
	ENTITY_SFX //found in chinese data files check if exist in West files
};

// values from decompile
enum class EntryTrype : i32
{
	ENTRY_TYPE = -1, // this one really exists
	ENTRY_TYPE_TUTORIAL = 0,
	ENTRY_TYPE_DEFENSE,
	ENTRY_TYPE_STAGE,
	ENTRY_TYPE_EVENT,
	ENTRY_TYPE_ARENA,
	ENTRY_TYPE_SPORTS,
	ENTRY_TYPE_TRAINING,
	ENTRY_TYPE_GUILDPVP,
	ENTRY_TYPE_MAX
};

// Has ItemComData _Type ITEM_TYPE_ETC
// Most of these types don't have a subtype
// xml tag EtcItemComData attribute _Type
// got values from decompile
enum class EtcType : i32
{
	ETC_TYPE_INVALID = -1,
	ETC_TYPE_FOOD = 0,
	ETC_TYPE_GOLD,
	ETC_TYPE_INVEN_TAB_0_1,
	ETC_TYPE_LEVELUPCOIN,
	ETC_TYPE_EATER,
	ETC_TYPE_LIFECHARGER,
	ETC_TYPE_SUPPORTKIT,
	ETC_TYPE_RONBOOSTER,
	ETC_TYPE_EXPBOOSTER,
	ETC_TYPE_MEDALBOOSTER,
	ETC_TYPE_TICKET,
	ETC_TYPE_VIP,
	ETC_TYPE_BOX,
	ETC_TYPE_MISC,
	ETC_TYPE_OTHERS,
	ETC_TYPE_BOOTY,
	ETC_TYPE_SKINSTONE,
	ETC_TYPE_RENAMER,
	ETC_TYPE_LIFETIME_SKIN,
	ETC_TYPE_LIFETIME_MASTER,
	ETC_TYPE_JUKEBOX,
	ETC_TYPE_NONE,
	ETC_TYPE_INVEN_TAB_1_2,
	ETC_TYPE_INGREDIENT,
	ETC_TYPE_MATERIA_ESSENCE,
	ETC_TYPE_INVEN_TAB_END,
	ETC_TYPE_CHARACTER,	// default value in switch case if value is < 0x3e9


	ETC_TYPE_EXPAND_INVENTORY_GEAR = 1001,
	ETC_TYPE_EXPAND_INVENTORY_MATERIAL,
	ETC_TYPE_EXPAND_INVENTORY_NORMAL,
	ETC_TYPE_EXPAND_MASTERGEAR,
	ETC_TYPE_EXPAND_WAREHOUSE,
	ETC_TYPE_OPEN_REWARD_ALL,
	ETC_TYPE_OPEN_REWARD_ONEMORE,
	ETC_TYPE_REFILL_STAGE_BATTERY,
	ETC_TYPE_REVIVAL_BY_COIN,
	ETC_TYPE_SKIN,
	ETC_TYPE_TITLE,
	ETC_TYPE_CCOINTOGOLD,
	ETC_TYPE_NCOINTOGOLD,
	ETC_TYPE_PROMOTIONGOLD,
	ETC_TYPE_GUILD_EMBLEM,
	ETC_TYPE_MAX,

	ETC_TYPE_SOUL // not in decomp but it's in ITEM_RON.xml in chinese dataset ToDo: check if this exist in west data
};

// Used in STAGELIST.xml
// values from decompile
enum class GameModeType : i32
{
	GAME_MODE_INVALID = -1,
	GAME_MODE_STAGE,
	GAME_MODE_DEFENCE,
	GAME_MODE_DEATH_MATCH,
	GAME_MODE_GOT,
	GAME_MODE_OCCUPY,
	GAME_MODE_SPORTS,
	GAME_MODE_TEST,
	GAME_MODE_MASTER_TRAINING,
	GAME_MODE_RANDOM_ARENA
};

// values from decompile
enum class GamePingType : i32
{
	GAME_PING_TYPE_INVALID = -1,
	GAME_PING_TYPE_NORMAL = 0,
	GAME_PING_TYPE_WARNING,
	GAME_PING_TYPE_TOGO,
	GAME_PING_TYPE_DEFENCE,
	GAME_PING_TYPE_SUPPORT,
	GAME_PING_TYPE_ATTACK,
	GAME_PING_TYPE_DESTROY,
	GAME_PING_TYPE_OCCUPY,
	GAME_PING_TYPE_BACK,
	GAME_PING_TYPE_MOBGEN
};

// When the maptype is INGAME it has a GameSubModeType except the training room
// values from decompile
enum class GameSubModeType : i32
{
	GAME_SUB_MODE_INVALID = -1, // from decompile
	GAME_SUB_MODE_STAGE_NORMAL = 0,
	GAME_SUB_MODE_STAGE_TUTORIAL,
	GAME_SUB_MODE_DEATH_MATCH_NORMAL,
	GAME_SUB_MODE_DEATH_MATCH_TUTORIAL,
	GAME_SUB_MODE_OCCUPY_CORE,
	GAME_SUB_MODE_OCCUPY_BUSH,
	GAME_SUB_MODE_SPORTS_RUN,
	GAME_SUB_MODE_SPORTS_SURVIVAL,
	GAME_SUB_MODE_GOT_NORMAL,
	GAME_SUB_MODE_GOT_TUTORIAL_BASIC,
	GAME_SUB_MODE_GOT_TUTORIAL_EXPERT,
	GAME_SUB_MODE_GOT_AUTHENTIC,
	GAME_SUB_MODE_GOT_ULTIMATE_TITAN,
	GAME_SUB_MODE_GOT_FIRE_POWER,
	GAME_SUB_MODE_GOT_FAKE_AI
};

// Has ItemComData _Type ITEM_TYPE_GEAR
// Values from decompile
enum class GearType : i32
{
	GEAR_TYPE_UNKNOWN = -1,
	GEAR_TYPE_ATT = 60,
	GEAR_TYPE_DEF = 70,
	GEAR_TYPE_UTIL = 80,
	GEAR_TYPE_MAX
};

//values from decompile
enum class InvenTab : i32
{
	INVEN_TAB_INVALID = -1, // UNKNOWN_E_INVEN_TAB idk the value
	INVEN_TAB_NONE = 0,
	INVEN_TAB_0,
	INVEN_TAB_1,
	INVEN_TAB_2,
	INVEN_TAB_MAX,
	INVEN_TAB_SYSTEM = 7,
	INVEN_TAB_STORAGE,
	INVEN_TAB_TEMP
};

//values form decompile
enum class ItemRank : i32
{
	ITEM_RANK_INVALID = -1,
	ITEM_RANK_USELESS = 1,
	ITEM_RANK_NORMAL,
	ITEM_RANK_RARE,
	ITEM_RANK_UNIQUE,
	ITEM_RANK_HEROIC,
	ITEM_RANK_LEGENDARY,
	ITEM_RANK_MAX
};

// Has EntityComData _Type ENTITY_TYPE_ITEM
enum class ItemType : i32
{
	ITEM_TYPE_UNKNOWN = -1,
	ITEM_TYPE_GEAR = 1,
	ITEM_TYPE_MATERIA,
	ITEM_TYPE_ETC,
	ITEM_TYPE_UNUSED,
	ITEM_TYPE_MAX
	//ITEM_TYPE_WEAPON = 1, not found in decompile?
};

// values from decompile
enum class MailBox : i32
{
	MAILBOX_INVALID = -1, //default case is UKNOWN_MAILBOX_TYPE
	MAILBOX_INBOX = 0,
	MAILBOX_ARCHIVE,
	MAILBOX_DELETED,
	MAILBOX_BLOCKED,
	MAILBOX_SHOP,
	MAILBOX_MAX
};

// values from decompile
enum class MailStatus : i32
{
	MAIL_INVALID = -1, //default case is UKNOWN_MAIL_STATUS_TYPE
	MAIL_UNREAD = 0,
	MAIL_READ,
	MAIL_ARCHIVED,
	MAIL_DELETED
};

enum class MapType : i32
{
	MAP_INVALID = 0,
	MAP_INGAME,
	MAP_CITY, //LOBBY
	MAP_PLATFORM,
	MAP_TUTORIAL,
	MAP_MAX // Anything else is UNKNOWN_E_MAP_TYPE
};

// NPC's that have shops or the jukebox have also _NPCType in CreatureComData
// These types can be used when _Type in CreatureComData is NPC
// ToDo get correct values from decompile
enum class NPCType: i32
{
	NPC_INVALID = 0,	// I don't know if these Types have an INVALID value --Delta-47
	NPC_JUKEBOX = 1,
	NPC_WAREHOUSE = 2,
	NPC_MEDAL_TRADER = 3,
	NPC_INGREDIENT_TRADER = 4,
	NPC_SKIN_TRADER = 5,
	NPC_GUILD = 6,
	NPC_PVE = 7,
	NPC_PVP = 8,
	NPC_MASTERTRAINING = 9,
	NPC_EVENTSHOP = 10
};

// values from decompile
enum class PVPResult : i32
{
	PVP_RESULT_INVALID = -1, // default case is UKNOWN_PVP_RESULT_TYPE
	PVP_RESULT_ERROR = 0,
	PVP_RESULT_WIN,
	PVP_RESULT_LOSE,
	PVP_RESULT_DRAW,
	PVP_RESULT_NOGAME,
	PVP_RESULT_LOSE_BY_LEAVE,
	PVP_RESULT_RESULT_FFA_RANKING_OFFSET = 10,
	PVP_RESULT_MAX
};

// _Type values for <ST_COMMONSKILL> in SKILL.xml
// values from decompile
enum class SkillType : i32
{
	SKILL_TYPE_INVALID = -1,
	SKILL_TYPE_PASSIVE = 0,
	SKILL_TYPE_NORMAL,
	SKILL_TYPE_TOGGLE,
	SKILL_TYPE_SUMMON,
	SKILL_TYPE_STANCE,
	SKILL_TYPE_SHIRK,
	SKILL_TYPE_COMBO,
	SKILL_TYPE_BREAKFALL,
	SKILL_TYPE_MAX
};

// these types are used from 
// values from decompile
enum class StatType : i32
{
	STAT_TYPE_INVALID = -1, //this exist and default case is UNKNOWN_STAT_TYPE
	STAT_TYPE_HEALTH = 0,
	STAT_TYPE_SKILL,
	STAT_TYPE_STAMINA,
	STAT_TYPE_HEALTHREGEN,
	STAT_TYPE_SKILLREGEN,
	STAT_TYPE_STAMINAREGEN,
	STAT_TYPE_ATTACK,
	STAT_TYPE_DEFENCE,
	STAT_TYPE_SKILLPOWER,
	STAT_TYPE_CRITICALRATE,
	STAT_TYPE_CRITICALDAMAGE,
	STAT_TYPE_WEAK_CRITICALRATE,
	STAT_TYPE_LIFESTEAL,
	STAT_TYPE_BASESPEED,
	STAT_TYPE_MOVESPEED,
	STAT_TYPE_ATTACKSPEED,
	STAT_TYPE_ABILITYPOINT,
	STAT_TYPE_ENERGY,
	STAT_TYPE_ROTATESPEED,
	STAT_TYPE_SHIELD_DEFENCE,
	STAT_TYPE_DEFENCE_PENETRATION,
	STAT_TYPE_SKILL_DEFENCE_PENETRATION,
	STAT_TYPE_PICKUP_RADIUS,
	STAT_TYPE_TAG_HEALTHREGEN_VALUE,
	STAT_TYPE_TAG_SKILLREGEN_VALUE,
	STAT_TYPE_TAG_STAMINAREGEN_VALUE,
	STAT_TYPE_TAG_BUBBLEREGEN_VALUE,
	STAT_TYPE_TAG_HEALTHREGEN_RATIO,
	STAT_TYPE_TAG_SKILLREGEN_RATIO,
	STAT_TYPE_TAG_STAMINAREGEN_RATIO,
	STAT_TYPE_TAG_BUBBLEREGEN_RATIO,
	STAT_TYPE_TAG_COOLTIME,
	STAT_TYPE_ROLLING_STAMINA,
	STAT_TYPE_ADD_DAMAGE_ON_BOUND,
	STAT_TYPE_ADD_DAMAGE_ON_HIT,
	STAT_TYPE_MANA,
	STAT_TYPE_RAGE,
	STAT_TYPE_ULTIMATE,
	STAT_TYPE_GROGGY,
	STAT_TYPE_MANAREGEN,
	STAT_TYPE_RAGEREGEN,
	STAT_TYPE_ENERGYREGEN,
	STAT_TYPE_ULTIMATEREGEN,
	STAT_TYPE_GROGGYREGEN,
	STAT_TYPE_TAG_MANAREGEN_VALUE,
	STAT_TYPE_TAG_RAGEREGEN_VALUE,
	STAT_TYPE_TAG_ENERGYREGEN_VALUE,
	STAT_TYPE_TAG_MANAREGEN_RATIO,
	STAT_TYPE_TAG_RAGEREGEN_RATIO,
	STAT_TYPE_TAG_ENERGYREGEN_RATIO,
	STAT_TYPE_RAGE_DAMAGE_RECOVERY_RATIO,
	STAT_TYPE_RAGE_ATTACK_RECOVERY_VALUE,
	STAT_TYPE_REMOTESPEED,
	STAT_TYPE_SKILL_COOLTIME_DISCOUNT,
	STAT_TYPE_ELEMENT_DAMAGE_BONUS,
	STAT_TYPE_ELEMENT_SKILL_DAMAGE_BONUS,
	STAT_TYPE_BUBBLE,
	STAT_TYPE_BUBBLEREGEN,
	STAT_TYPE_SKILLDAMAGE_REDUCE_RATIO,
	STAT_TYPE_SKILLDAMAGE_RATIO,
	STAT_TYPE_REFLECT_DAMAGE_VALUE,
	STAT_TYPE_REFLECT_DAMAGE_RATIO,
	STAT_TYPE_SKILL_LIFESTEAL,
	STAT_TYPE_SKILL_CRITICALRATE,
	STAT_TYPE_SKILL_CRITICALDAMAGE,
	STAT_TYPE_TOUGHNESS,
	STAT_TYPE_MAX
};

// Has ETC_TYPE_SUPPORTKIT _Type in EtcItemComData
enum class SupportKitType : i32
{
	SUPPORTKIT_INVALID = 0,
	SUPPORTKIT_HP = 1
};

// values from decompile
// doesn't seem to be used by the client side
enum class TriggerType : i32
{
	TRIGGER_TYPE_INVALID = -1, //UNKNOWN_ LevelTriggerType default return
	TRIGGER_TYPE_BOUND = 0,
	TRIGGER_TYPE_PLAYER_BOUND,
	TRIGGER_TYPE_CREATURE_ENTER,
	TRIGGER_TYPE_CREATURE_OUT,
	TRIGGER_TYPE_HP,
	TRIGGER_TYPE_DEAD,
	TRIGGER_TYPE_HIT,
	TRIGGER_TYPE_LEVELSTART,
	TRIGGER_TYPE_START_TIME_RECORD,
	TRIGGER_TYPE_INTERACTION,
	TRIGGER_TYPE_PHASE_START,
	TRIGGER_TYPE_PHASE_END,
	TRIGGER_TYPE_AI,
	TRIGGER_TYPE_TUTORIAL,
	TRIGGER_TYPE_TAG,
	TRIGGER_TYPE_GAME_END,
	TRIGGER_TYPE_DIALOG,
	TRIGGER_TYPE_TAKE_ITEM
};

// values from decompile
enum class WeaponSpecREF : i32
{
	WEAPONSPEC_REF_INVALID = -1, //This invalid exist in the code and UNKNOWN_EWeaponSpecReferenceType is the default return
	WEAPONSPEC_REF_FIRINGMETHOD_CHARGING_TIME_LEVEL1 = 0,
	WEAPONSPEC_REF_FIRINGMETHOD_CHARGING_TIME_LEVEL2,
	WEAPONSPEC_REF_FIRINGMETHOD_CHARGING_TIME_LEVEL3,
	WEAPONSPEC_REF_FIRINGMETHOD_COMBO_FIREDELAY,
	WEAPONSPEC_REF_FIRINGMETHOD_COMBO_VALIDTIME,
	WEAPONSPEC_REF_FIRINGMETHOD_CONSUMPTION,
	WEAPONSPEC_REF_FIRINGMETHOD_CONSUMPTION_BY_CHARGING,
	WEAPONSPEC_REF_FIRINGMETHOD_ERRORANGLE,
	WEAPONSPEC_REF_FIRINGMETHOD_FIREDELAY,
	WEAPONSPEC_REF_FIRINGMETHOD_MAXDISTANCE,
	WEAPONSPEC_REF_FIRINGMETHOD_MINDISTANCE,
	WEAPONSPEC_REF_FIRINGMETHOD_CHARGING_LEVEL_1_CREATE_RADIATE_MAXNUM,
	WEAPONSPEC_REF_FIRINGMETHOD_CHARGING_LEVEL_2_CREATE_RADIATE_MAXNUM,
	WEAPONSPEC_REF_FIRINGMETHOD_CREATE_RADIATE_MAXANGBLE,
	WEAPONSPEC_REF_FIRINGMETHOD_CREATE_RADIATE_MAXNUM,
	WEAPONSPEC_REF_FIRINGMETHOD_FIRINGSTAT_MOVEMENT_SPEED,
	WEAPONSPEC_REF_FIRINGMETHOD_GAUGE_LEVEL,
	WEAPONSPEC_REF_FIRINGMETHOD_CHARGING_LEVEL_1_CREATE_PARALLEL_MAXNUM,
	WEAPONSPEC_REF_FIRINGMETHOD_CHARGING_LEVEL_2_CREATE_PARALLEL_MAXNUM,
	WEAPONSPEC_REF_FIRINGMETHOD_CHARGING_LEVEL_1_ANIMATION_MOVEHORIZON,
	WEAPONSPEC_REF_FIRINGMETHOD_CHARGING_LEVEL_2_ANIMATION_MOVEHORIZON,
	WEAPONSPEC_REF_FIRINGMETHOD_GAUGE_AUTOREGEN,
	WEAPONSPEC_REF_REMOTE_ANGLE,
	WEAPONSPEC_REF_REMOTE_ATTACKMULTIPLIER,
	WEAPONSPEC_REF_REMOTE_DAMAGEONBOUND,
	WEAPONSPEC_REF_REMOTE_FOV,
	WEAPONSPEC_REF_REMOTE_LENGTH_X,
	WEAPONSPEC_REF_REMOTE_LENGTH_Y,
	WEAPONSPEC_REF_REMOTE_MAXDISTANCE,
	WEAPONSPEC_REF_REMOTE_MAXSCALE,
	WEAPONSPEC_REF_REMOTE_MINSCALE,
	WEAPONSPEC_REF_REMOTE_MAXSPEED,
	WEAPONSPEC_REF_REMOTE_PENETRATIONCOUNT,
	WEAPONSPEC_REF_REMOTE_SIGHT,
	WEAPONSPEC_REF_REMOTE_STATUS_RATE,
	WEAPONSPEC_REF_REMOTE_CRITICALRATE,
	WEAPONSPEC_REF_REMOTE_SUBBOUNDLENGTH,
	WEAPONSPEC_REF_ACTIONBASE_PARAM_1,
	WEAPONSPEC_REF_STATUS_DISTANCE,
	WEAPONSPEC_REF_STATUS_REGEN_AND_HEALTH,
	WEAPONSPEC_REF_STATUS_STAT_MOVEMENT_SPEED,
	WEAPONSPEC_REF_STATUS_STAT_DEFENCE,
	WEAPONSPEC_REF_STATUS_DURATION_TIME,
	WEAPONSPEC_REF_STATUS_MAX_OVERLAP_COUNT,
	WEAPONSPEC_REF_STATUS_DOT_DAMAGE_MULTIPLIER,
	WEAPONSPEC_REF_ATTACK,
	WEAPONSPEC_REF_STAT_AND_CRITICALDAMAGE,
	WEAPONSPEC_REF_STAT_AND_CRITICALRATE,
	WEAPONSPEC_REF_MAX
};

// STAGELIST.xml
// values from decompile
enum class WorldStageType : i32
{
	UNKNOWN_WORLD_STAGE_TYPE = -1,
	WORLD_STAGE_TYPE_NONE = 0,
	WORLD_STAGE_TYPE_PVE,
	WORLD_STAGE_TYPE_PVP,
	WORLD_STAGE_TYPES
};

// STAGELIST.xml
// values from decompile
enum class WorldStageDifficultType : i32
{
	UNKNOWN_WORLD_STAGE_DIFFICULT = -1,
	WORLD_STAGE_DIFFICULT_INVALID = 0,
	WORLD_STAGE_DIFFICULT_EASY,
	WORLD_STAGE_DIFFICULT_NORMAL,
	WORLD_STAGE_DIFFICULT_HARD,
	WORLD_STAGE_DIFFICULT_EXTREME,
	WORLD_STAGE_DIFFICULT_HELL,
	WORLD_STAGE_DIFFICULT_MAX
};

constexpr i32 JUKEBOX_MAX_TRACKS = 8;

enum class TeamID: i32
{
	INVALID = -1,
	RED = 0,
	BLUE = 1,
	_COUNT = 2
};

// TODO: weird place for this
struct PlayerCastSkill
{
	ActorUID playerActorUID;
	SkillID skillID;
	vec3 p3nPos;
	eastl::fixed_vector<ActorUID,32,false> targetList;
	Cl::CQ_PlayerCastSkill::PosStruct posStruct;
};

inline f32 MxmYawToWorldYaw(f32 a)
{
	return -a - PI/2;
}

inline f32 WorldYawToMxmYaw(f32 a)
{
	return -(a + PI/2);
}

inline f32 MxmPitchToWorldPitch(f32 a)
{
	return a; // TODO: reverse this
}

inline f32 WorldPitchToMxmPitch(f32 a)
{
	return a; // TODO: reverse this
}

struct RotationHumanoid
{
	f32 upperYaw = 0;
	f32 upperPitch = 0;
	f32 bodyYaw = 0;
};

inline RotationHumanoid RotConvertToMxm(const RotationHumanoid& in)
{
	RotationHumanoid out;
	out.upperYaw = WorldYawToMxmYaw(in.upperYaw);
	out.upperPitch = WorldPitchToMxmPitch(in.upperPitch);
	out.bodyYaw = WorldYawToMxmYaw(in.bodyYaw);
	return out;
}

inline RotationHumanoid RotConvertToWorld(const RotationHumanoid& in)
{
	RotationHumanoid out;
	out.upperYaw = MxmYawToWorldYaw(in.upperYaw);
	out.upperPitch = MxmPitchToWorldPitch(in.upperPitch);
	out.bodyYaw = MxmYawToWorldYaw(in.bodyYaw);
	return out;
}

constexpr i32 PLAYER_CHARACTER_COUNT = 2;

struct GlobalTweakableVariables
{
	f32 jumpForce = 2000;
	f32 gravity = 5000;
	f32 stepHeight = 120;
};

GlobalTweakableVariables& GetGlobalTweakableVars();
